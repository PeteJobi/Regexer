$.ajax({
    url: Strings.URL_CLASS + "joinClass/" + classe.id, // api/Class/joinClass
    contentType: "application/json",
    method: "POST",
    success: (classe: Types.IClass) => {
        updClassDispatch({
            type: Strings.UPDATE_CLASS_PARAMS,
            classAction: Strings.EDIT_CLASS,
            classId: classe.id,
            class: classe
        })
    },
    error: (xhr, status, error) => {
        console.log(xhr.responseText, status, error)
        yo()
    }
})

() => {
    $.ajax({
        url: Strings.URL_CLASS + "joinClass/" + classe.id,
        contentType: "application/json",
        method: "POST",
        success: (classe: Types.IClass) => {
            updClassDispatch({
                type: Strings.UPDATE_CLASS_PARAMS,
                classAction: Strings.EDIT_CLASS,
                classId: classe.id,
                class: classe
            })
            ibad()
        },
        error: (xhr, status, error) => {
            whoBad()
            console.log(xhr.responseText, status, error)
        }
    })
}

for ([init]; i < sentenceWords.Length; i++) {
    if (dic[sentenceWords[i]] > 1) continue;
    for (int j = i + 1; j < sentenceWords.Length; j++)
    {
        if (ArePalindromes(sentenceWords[i], sentenceWords[j])) {
            dic[sentenceWords[i]]++;
            dic[sentenceWords[j]]++;
        }
    }
}

$.ajax({
    url: [[url]],[[comment|o]]
    contentType: "application/json",
    method: "[[met{\w+}]]",
    success: ([[ident]]: [[type]]) => {
        [[act|ml]]
    },
    error: (xhr, status, error) => {
        [[not|ml]]
    }
})

Functions.fetchCall<[[type]]>([[url]], { [[comment]]
    method: "[[met]]",
    notOk: (status, responseText, noConnection, noConnectionString) => {
        1[[not]]
    }
}).then((response) => {
    if(!response.ok) return
    const [[ident]] = response.result
    [[act]],
})

(?<space>[^\S\r\n]+)?\$\.ajax\({
([^\S\r\n]+)?[^\S\r\n]+url:[^\S\r\n]+(?<url>.+?),
([^\S\r\n]+)?[^\S\r\n]+contentType:[^\S\r\n]+"application/json",
([^\S\r\n]+)?[^\S\r\n]+data:[^\S\r\n]+(?<query>.+?),
([^\S\r\n]+)?[^\S\r\n]+method:[^\S\r\n]+"GET",
([^\S\r\n]+)?[^\S\r\n]+success:[^\S\r\n]+\((?<ident>.+?):[^\S\r\n]+(?<type>.+?)\)[^\S\r\n]+=>[^\S\r\n]+{
([^\S\r\n]+)?(?<act>(?<actFirstLine>.+?)((\r\n\k<space>?        (?<actNextLines>([^\S\r\n]+)?.+?))+?)?)
([^\S\r\n]+)?[^\S\r\n]+},
([^\S\r\n]+)?[^\S\r\n]+error:[^\S\r\n]+\(xhr,[^\S\r\n]+status,[^\S\r\n]+error\)[^\S\r\n]+=>[^\S\r\n]+{
([^\S\r\n]+)?(?<not>(?<notFirstLine>.+?)((\r\n\k<space>?        (?<notNextLines>([^\S\r\n]+)?.+?))+?)?)
([^\S\r\n]+)?[^\S\r\n]+}
([^\S\r\n]+)?}\)